----------------------------Zadanie I-----------------------------
DROP TABLE Countries CASCADE CONSTRAINTS;
DROP TABLE Departments CASCADE CONSTRAINTS;
DROP TABLE Employees CASCADE CONSTRAINTS;
DROP TABLE Job_History CASCADE CONSTRAINTS;
DROP TABLE Jobs CASCADE CONSTRAINTS;
DROP TABLE Locations CASCADE CONSTRAINTS;
DROP TABLE Regions CASCADE CONSTRAINTS;


----------------------------Zadanie II----------------------------
CREATE TABLE regions AS SELECT * FROM hr.regions;
CREATE TABLE countries AS SELECT * FROM hr.countries;
CREATE TABLE locations AS SELECT * FROM hr.locations;
CREATE TABLE departments AS SELECT * FROM hr.departments;
CREATE TABLE employees AS SELECT * FROM hr.employees;
CREATE TABLE job_history AS SELECT * FROM hr.job_history;
CREATE TABLE jobs AS SELECT * FROM hr.jobs;

ALTER TABLE regions ADD PRIMARY KEY (region_id);
ALTER TABLE countries ADD PRIMARY KEY (country_id);
ALTER TABLE locations ADD PRIMARY KEY (location_id);
ALTER TABLE departments ADD PRIMARY KEY (department_id);
ALTER TABLE employees ADD PRIMARY KEY (employee_id);
ALTER TABLE jobs ADD PRIMARY KEY (job_id);
ALTER TABLE job_history ADD PRIMARY KEY (employee_id, start_date);

ALTER TABLE Countries
ADD CONSTRAINT fk_countries_regions
FOREIGN KEY (region_id) REFERENCES Regions(region_id);

ALTER TABLE Locations
ADD CONSTRAINT fk_locations_countries
FOREIGN KEY (country_id) REFERENCES Countries(country_id);

ALTER TABLE Departments
ADD CONSTRAINT fk_departments_locations
FOREIGN KEY (location_id) REFERENCES Locations(location_id);

ALTER TABLE Employees
ADD CONSTRAINT fk_employees_jobs
FOREIGN KEY (job_id) REFERENCES Jobs(job_id);

ALTER TABLE Employees
ADD CONSTRAINT fk_employees_departments
FOREIGN KEY (department_id) REFERENCES Departments(department_id);

ALTER TABLE Employees
ADD CONSTRAINT fk_employees_manager
FOREIGN KEY (manager_id) REFERENCES Employees(employee_id);

ALTER TABLE Departments
ADD CONSTRAINT fk_departments_manager
FOREIGN KEY (manager_id) REFERENCES Employees(employee_id);

ALTER TABLE Job_History
ADD CONSTRAINT fk_job_history_employee
FOREIGN KEY (employee_id) REFERENCES Employees(employee_id);

ALTER TABLE Job_History
ADD CONSTRAINT fk_job_history_job
FOREIGN KEY (job_id) REFERENCES Jobs(job_id);

ALTER TABLE Job_History
ADD CONSTRAINT fk_job_history_department
FOREIGN KEY (department_id) REFERENCES Departments(department_id);

----------------------------Zadanie III---------------------------
----------------------------Zadanie 1-----------------------------
SELECT last_name||' '||salary AS wynagrodzenie
FROM employees
WHERE 1=1
    AND department_id IN(20,50)
    AND salary BETWEEN 2000 AND 7000
ORDER BY last_name;
    

----------------------------Zadanie 2-----------------------------
SELECT hire_date, last_name, manager_id
FROM employees
WHERE 1=1
    AND manager_id IS NOT NULL
    AND EXTRACT(YEAR from hire_date) = 2005
ORDER BY manager_id;

----------------------------Zadanie 3-----------------------------
SELECT first_name||' '||last_name AS fist_last_name, salary, phone_number
FROM employees
WHERE 1=1
    AND SUBSTR(LOWER(last_name), 3, 1) = 'e'
    AND LOWER(first_name) LIKE '%in%'
ORDER BY first_name ASC, salary DESC;
    

----------------------------Zadanie 4-----------------------------
SELECT first_name || ' ' || last_name AS imie_nazwisko,
    ROUND(MONTHS_BETWEEN(SYSDATE, hire_date)) AS miesiace_przepracowane,
    CASE 
        WHEN ROUND(MONTHS_BETWEEN(SYSDATE, hire_date)) < 150 THEN salary * 0.10
        WHEN ROUND(MONTHS_BETWEEN(SYSDATE, hire_date)) BETWEEN 150 AND 199 THEN salary * 0.20
        ELSE salary * 0.30
    END AS wysokosc_dodatku
FROM employees
ORDER BY miesiace_przepracowane;


----------------------------Zadanie 5-----------------------------
SELECT department_id,
    SUM(salary) AS suma_zarobkow,
    ROUND(AVG(salary)) AS srednia_zarobkow
FROM employees
GROUP BY department_id
HAVING MIN(salary) > 5000;


----------------------------Zadanie 6-----------------------------
SELECT e.last_name,
    e.department_id,
    d.department_name,
    e.job_id
FROM 
    employees e
INNER JOIN 
    departments d ON e.department_id = d.department_id 
    locations l ON d.location_id = l.location_id
WHERE 
    l.city = 'Toronto';


----------------------------Zadanie 7-----------------------------
SELECT 
    e.first_name AS employee_first_name,
    e.last_name AS employee_last_name,
    w.first_name AS coworker_first_name,
    w.last_name AS coworker_last_name
FROM 
    employees e
LEFT JOIN employees w
    ON e.department_id = w.department_id
    AND e.employee_id != w.employee_id
WHERE 
    e.first_name = 'Jennifer';



----------------------------Zadanie 8-----------------------------
SELECT 
    d.department_id,
    d.department_name
FROM 
    departments d
LEFT JOIN Employees e
    ON d.department_id = e.department_id
WHERE 
    e.department_id IS NULL;


----------------------------Zadanie 9-----------------------------
SELECT first_name,
    last_name,
    job_id,
    salary
FROM employees;

!!!!DO POPRAWKI!!!!

----------------------------Zadanie 10----------------------------
SELECT e.first_name,
    e.last_name,
    e.salary
FROM 
    employees e
WHERE 
    e.salary > (SELECT AVG(salary) FROM employees)
ORDER BY 
    e.salary DESC;


----------------------------Zadanie 11----------------------------
SELECT e.employee_id, 
    e.first_name, 
    e.last_name
FROM employees e
WHERE e.department_id IN (
    SELECT DISTINCT e2.department_id
    FROM employees e2
    WHERE e2.last_name LIKE '%u%'
);


----------------------------Zadanie 12----------------------------
SELECT first_name,
    last_name
FROM employees
WHERE (SYSDATE - hire_date) > (
    SELECT AVG(SYSDATE - hire_date) 
    FROM employees
);


----------------------------Zadanie 13----------------------------
SELECT d.department_name, 
       COUNT(e.employee_id) AS num_employees, 
       ROUND(AVG(e.salary), 2) AS avg_salary
FROM departments d
JOIN employees e ON d.department_id = e.department_id
GROUP BY d.department_name
ORDER BY num_employees DESC;


----------------------------Zadanie 14----------------------------
SELECT e.first_name, 
    e.last_name
FROM employees e
WHERE e.salary < (
    SELECT MIN(e2.salary)
    FROM employees e2
    JOIN departments d ON e2.department_id = d.department_id
    WHERE d.department_name = 'IT'
);


----------------------------Zadanie 15----------------------------


----------------------------Zadanie 16----------------------------
SELECT j.job_title, 
    AVG(e.salary) AS avg_salary
FROM employees e
JOIN jobs j ON e.job_id = j.job_id
GROUP BY j.job_title
ORDER BY avg_salary DESC
FETCH FIRST 5 ROWS ONLY;



----------------------------Zadanie 17----------------------------



----------------------------Zadanie 18----------------------------


----------------------------Zadanie 19----------------------------


----------------------------Zadanie 20----------------------------
SELECT d.department_name, 
    ROUND(AVG(e.salary), 2) AS avg_salary
FROM employees e
JOIN departments d ON e.department_id = d.department_id
GROUP BY d.department_name
ORDER BY avg_salary DESC
FETCH FIRST 3 ROWS ONLY;
